(function(){const i=document.createElement("link").relList;if(i&&i.supports&&i.supports("modulepreload"))return;for(const n of document.querySelectorAll('link[rel="modulepreload"]'))d(n);new MutationObserver(n=>{for(const r of n)if(r.type==="childList")for(const l of r.addedNodes)l.tagName==="LINK"&&l.rel==="modulepreload"&&d(l)}).observe(document,{childList:!0,subtree:!0});function p(n){const r={};return n.integrity&&(r.integrity=n.integrity),n.referrerpolicy&&(r.referrerPolicy=n.referrerpolicy),n.crossorigin==="use-credentials"?r.credentials="include":n.crossorigin==="anonymous"?r.credentials="omit":r.credentials="same-origin",r}function d(n){if(n.ep)return;n.ep=!0;const r=p(n);fetch(n.href,r)}})();const h=(t,i)=>Math.sqrt(Math.pow(t,2)+Math.pow(i,2));function f(t,i,p,d){const n=d-i,r=p-t;let l=Math.atan2(n,r);return l<0&&(l=2*Math.PI+l),l}const g=t=>t*(180/Math.PI);document.querySelector("#app").innerHTML=`
  <div>
   <canvas></canvas>
   <div>Hypoténus : <span id="hyp-val"></span> PX</div>
   <div>X : <span id="x-val"></span> PX</div>
   <div>Y : <span id="y-val"></span> PX</div>
   <div>Angle souris : <span id="tan-mouse-val"></span>𝝿</div>
   <div>Angle souris degrees: <span id="tan-mouse-degree-val">°</span></div>
  </div>
`;const y=300,a=document.querySelector("canvas");a.width=y;a.height=y;a.style.border="1px solid black";a.style.background="white";const m=document.querySelector("#hyp-val"),x=document.querySelector("#x-val"),M=document.querySelector("#y-val"),P=document.querySelector("#tan-mouse-val"),T=document.querySelector("#tan-mouse-degree-val"),s=y/2,u=t=>t+s,c=t=>y-(t+s),e=a.getContext("2d");e.fillStyle="rgba(200, 0, 0, 0)";e.strokeStyle="rgba(200, 200, 200)";let o={x:s+25,y:15,rx:0,ry:0};function v(){e.clearRect(0,0,a.width,a.height),e.beginPath(),e.arc(s,s,s-3,0,Math.PI*2,!0),e.stroke(),e.beginPath(),e.moveTo(u(0),c(0)),e.lineTo(o.x,o.y),e.stroke();const t=f(0,0,o.rx,o.ry);P.innerHTML=t.toFixed(2),T.innerHTML=g(t).toFixed(2),e.beginPath(),e.arc(s,s,50,0,2*Math.PI-t,!0),e.stroke(),e.beginPath(),e.moveTo(u(0),c(0)),e.lineTo(o.x,o.y),e.lineTo(u(o.rx),c(0)),e.lineTo(u(0),c(0)),e.stroke(),m.innerHTML=h(o.rx,o.ry).toFixed(2),x.innerHTML=o.rx.toFixed(2),M.innerHTML=o.ry.toFixed(2)}v();a.addEventListener("mousemove",t=>{const i=a.getBoundingClientRect();o={x:t.clientX-i.left,y:t.clientY-i.top,rx:0,ry:0},o.rx=o.x-s,o.ry=c(o.y),v()});
